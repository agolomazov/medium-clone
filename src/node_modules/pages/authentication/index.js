import React, { useState, useEffect, useContext } from 'react';
import { Link, Redirect } from 'react-router-dom';

import useFetch from 'hooks/useFetch';
import useSessionStorage from 'hooks/useSessionStorage';
import { CurrentUserContext } from 'contexts/currentUser';
import { BackendErrorMessages } from './components/backendErrorMessages';

export const Authentication = ({
  location: { pathname }
}) => {
  const isLogin = pathname === '/login';

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [username, setUsername] = useState('');
  const [, setIsSuccessfullSubmit] = useState(false);

  const apiUrl = isLogin ? '/users/login' : '/users';
  const [{ response, isLoading, error }, doFetch] = useFetch(apiUrl);

  const [token, setToken] = useSessionStorage('token');
  const [, setCurrentUserState] = useContext(CurrentUserContext);

  const pageTitle = isLogin ? 'Sign in': 'Sign up';
  const descriptionLink = isLogin ? '/register': '/login';
  const descriptionText = isLogin ? 'Need an account?': 'Have an account?';

  const handleSubmit = (e) => {
    e.preventDefault();
    const user = isLogin ? { email, password } : { email, password, username }
    doFetch({
      method: 'post',
      data: { user },
    });
  }

  useEffect(() => {
    if (!response) {
      return;
    }

    setToken(response.user.token);
    setIsSuccessfullSubmit(true);
    setCurrentUserState(state => ({
      ...state,
      isLoggedIn: true,
      isLoading: false,
      currentUser: response.user,
    }));
  }, [
    response,
    setCurrentUserState,
    setToken,
    setIsSuccessfullSubmit,
  ]);

  if (token) {
    return (
      <Redirect to='/' />
    );
  }

  return (
    <div className="auth-page">
      <div className="container page">
        <div className="row">
          <div className="col-md-6 offset-md-3 col-xs-12">
            <h1 className="text-xs-center">
              { pageTitle }
            </h1>
            <p className="text-xs-center">
              <Link to={descriptionLink}>
                { descriptionText }
              </Link>
            </p>

            <form onSubmit={handleSubmit}>
              { error && <BackendErrorMessages backendErrors={error.errors} /> }
              <fieldset>
                { !isLogin && (
                  <fieldset className='form-group'>
                    <input
                      type="text"
                      className='form-control form-control-lg'
                      placeholder='Username'
                      value={username}
                      onChange={e => setUsername(e.target.value)}
                      autoComplete="off"
                    />
                  </fieldset>
                ) }
                <fieldset className='form-group'>
                  <input
                    type="email"
                    className='form-control form-control-lg'
                    placeholder='Email'
                    value={email}
                    onChange={e => setEmail(e.target.value)}
                    autoComplete="off"
                  />
                </fieldset>
                <fieldset className='form-group'>
                  <input
                    type="password"
                    className='form-control form-control-lg'
                    placeholder='Password'
                    value={password}
                    onChange={e => setPassword(e.target.value)}
                    autoComplete="off"
                  />
                </fieldset>
                <button
                  className='btn bnt-lg btn-primary pull-xs-right'
                  type='submit'
                  disabled={isLoading}
                >
                  { pageTitle }
                </button>
              </fieldset>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}