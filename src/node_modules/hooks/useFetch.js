import { useState, useEffect, useCallback } from 'react';
import axios from 'axios';

import useSessionStorage from 'hooks/useSessionStorage';

export default (url) => {
  const baseUrl = 'https://conduit.productionready.io/api';
  const [isLoading, setLoading] = useState(false);
  const [response, setResponse] = useState(null);
  const [error, setError] = useState(null);
  const [options, setOptions] = useState({});
  const [token] = useSessionStorage('token');

  const doFetch = useCallback((options = {}) => {
    setOptions(options);
    setLoading(true);
  }, []);

  useEffect(() => {
    let skipGetResponseAfterDestroy = false;

    const requestOptions = {
      ...options,
      ...{
        headers: {
          authorization: token ? `Token ${token}` : ''
        },
      }
    }

    if (isLoading) {
      axios(`${baseUrl}${url}`, requestOptions)
      .then(res => {
    
        if (!skipGetResponseAfterDestroy) {
          setResponse(res.data);
          setError(null);
          setLoading(false);
        }
      })
      .catch(err => {
        if (!skipGetResponseAfterDestroy) {
          setError(err.response.data);
          setLoading(false);
        }
      });
    }

    return () => {
      skipGetResponseAfterDestroy = true;
    };
}, [isLoading, options, url, token]);

  return [{ isLoading, response, error }, doFetch];
}